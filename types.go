package basicauth

import (
	"errors"
)

var (
	ErrNoSuchUser      = errors.New("error: no such user")
	ErrUserExists      = errors.New("error: user already exists")
	ErrInvalidPassword = errors.New("error: password does not check out with stored value")
	ErrFailedToEncrypt = errors.New("error: could not hash provided password")
	ErrSamePassword    = errors.New("error: old password and new password must not match")
	ErrNoSuchSession   = errors.New("error: user is not logged in")
	ErrInvalidToken    = errors.New("error: invalid token")
)

// UserName type represents a user name
type UserName string

// Secret represents hash of user password stored in file
// generated by bcrypt library
type Secret string

//Password represents user password
type Password string

// SessionToken represents a session token issued
// by SessionKeeper
type SessionToken string

/* // User to use later to prevent guessing password
type User struct {
	UserName            UserName
	FailedLoginAttempts int
	Lastlogin           time.Time
	PasswordHint        string
} */

// PasswordKeeper is an interface to whatever password storage
// facility we have.
type PasswordKeeper interface {
	CheckUserPassword(UserName, Password) error
	AddUser(UserName, Password) error
	DelUser(UserName, Password) error
	ChangeUserPassword(UserName, Password, Password) error
	Close() error
}

// TokenKeeper is an interface to whatever token storage we
// have.
type TokenKeeper interface {
	GenerateToken(UserName) (SessionToken, error)
	CheckToken(UserName, SessionToken) error
	DeleteUserSession(UserName) error
	Close() error
}
